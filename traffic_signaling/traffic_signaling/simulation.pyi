from typing import Literal

from .city_plan import CityPlan

class Schedule:
    DEFAULT_DIVISOR: int = 20

    @property
    def length(self) -> int: ...
    @property
    def duration(self) -> int: ...
    @property
    def order(self) -> list[int]: ...
    @property
    def times(self) -> list[int]: ...
    def relative_order(self) -> list[int]: ...
    def set(self, order: list[int], times: list[int], relative_order: bool = False) -> None: ...

def set_seed(seed: int) -> None: ...

class Simulation:
    def __init__(self, city_plan: CityPlan) -> None: ...
    def load_schedules(self, filename: str) -> None: ...
    def save_schedules(self, filename: str) -> None: ...
    def create_schedules(
        self, order: Literal['default', 'adaptive', 'random'], times: Literal['default', 'scaled'],
        divisor: int = Schedule.DEFAULT_DIVISOR,
    ) -> None: ...
    def default_schedules(self) -> None: ...
    def adaptive_schedules(self) -> None: ...
    def random_schedules(self) -> None: ...
    def scaled_schedules(self, divisor: int = Schedule.DEFAULT_DIVISOR) -> None: ...
    def non_trivial_schedules(self, relative_order: bool = False) -> list[tuple[list[int], list[int]]]: ...
    def set_non_trivial_schedules(
        self, schedules: list[tuple[list[int], list[int]]], relative_order: bool = False
    ) -> None: ...
    def score(self) -> int: ...
    def summary(self) -> None: ...
    @property
    def schedules(self) -> dict[int, Schedule]: ...

def default_simulation(city_plan: CityPlan) -> Simulation: ...
def adaptive_simulation(city_plan: CityPlan) -> Simulation: ...
